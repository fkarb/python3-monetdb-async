# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.monetdb.org/Legal/MonetDBLicense
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2015 MonetDB B.V.
# All Rights Reserved.

import logging
from itertools import islice

from monetdb.sql import monetize, pythonize
from monetdb.exceptions import *
from monetdb import mapi

logger = logging.getLogger("monetdb")
logger.addHandler(logging.NullHandler())


class Cursor(object):
    """This object represents a database cursor, which is used to manage
    the context of a fetch operation. Cursors created from the same
    connection are not isolated, i.e., any changes done to the
    database by a cursor are immediately visible by the other
    cursors"""
    def __init__(self, connection):
        """This read-only attribute return a reference to the Connection
        object on which the cursor was created."""
        self.connection = connection

        # last executed operation (query)
        self.operation = ""

        # This read/write attribute specifies the number of rows to
        # fetch at a time with .fetchmany()
        self.arraysize = connection.replysize

        # This read-only attribute specifies the number of rows that
        # the last .execute*() produced (for DQL statements like
        # 'select') or affected (for DML statements like 'update' or
        # 'insert').
        #
        # The attribute is -1 in case no .execute*() has been
        # performed on the cursor or the rowcount of the last
        # operation is cannot be determined by the interface.
        self.rowcount = -1

        # This read-only attribute is a sequence of 7-item
        # sequences.
        #
        # Each of these sequences contains information describing
        # one result column:
        #
        #   (name,
        #    type_code,
        #    display_size,
        #    internal_size,
        #    precision,
        #    scale,
        #    null_ok)
        #
        # This attribute will be None for operations that
        # do not return rows or if the cursor has not had an
        # operation invoked via the .execute*() method yet.
        self.description = None

        #This read-only attribute indicates at which row
        #we currently are
        self.rownumber = -1

        self.__executed = None

        # the offset of the current resultset in the total resultset
        self.__offset = 0

        # the resultset
        self.__rows = []

        # used to identify a query during server contact.
        #Only select queries have query ID
        self.__query_id = -1

        # This is a Python list object to which the interface appends
        # tuples (exception class, exception value) for all messages
        # which the interfaces receives from the underlying database for
        # this cursor.
        #
        # The list is cleared by all standard cursor methods calls (prior
        # to executing the call) except for the .fetch*() calls
        # automatically to avoid excessive memory usage and can also be
        # cleared by executing "del cursor.messages[:]".
        #
        # All error and warning messages generated by the database are
        # placed into this list, so checking the list allows the user to
        # verify correct operation of the method calls.
        self.messages = []

        # This read-only attribute provides the rowid of the last
        # modified row (most databases return a rowid only when a single
        # INSERT operation is performed). If the operation does not set
        # a rowid or if the database does not support rowids, this
        # attribute should be set to None.
        #
        # The semantics of .lastrowid are undefined in case the last
        # executed statement modified more than one row, e.g. when
        # using INSERT with .executemany().
        self.lastrowid = None

    def __check_executed(self):
        if not self.__executed:
            self.__exception_handler(ProgrammingError, "do a execute() first")

    def close(self):
        """ Close the cursor now (rather than whenever __del__ is
        called).  The cursor will be unusable from this point
        forward; an Error (or subclass) exception will be raised
        if any operation is attempted with the cursor."""
        self.connection = None

    def execute(self, operation, parameters=None):
        """Prepare and execute a database operation (query or
        command).  Parameters may be provided as mapping and
        will be bound to variables in the operation.
        """
        if not self.connection:
            self.__exception_handler(ProgrammingError, "cursor is closed")

        def task():
            # clear message history
            self.messages = []

            # set the number of rows to fetch
            if self.arraysize != self.connection.replysize:
                self.connection.set_replysize(self.arraysize)

            if operation == self.operation:
                #same operation, DBAPI mentioned something about reuse
                # but monetdb doesn't support this
                pass
            else:
                self.operation = operation

            query = ""
            if parameters:
                if isinstance(parameters, dict):
                    query = operation % dict([(k, monetize.convert(v))
                                              for (k, v) in parameters.items()])
                elif type(parameters) == list or type(parameters) == tuple:
                    query = operation % tuple([monetize.convert(item) for item
                                               in parameters])
                elif isinstance(parameters, str):
                    query = operation % monetize.convert(parameters)
                else:
                    msg = "Parameters should be None, dict or list, now it is %s"
                    self.__exception_handler(ValueError, msg % type(parameters))
            else:
                query = operation

            block = self.connection.execute(query)
            self.__store_result(block)
            self.rownumber = 0
            self.__executed = operation
            return self.rowcount

        if self.connection.isasync():
            self.connection.mapi.runasync(task)
        else:
            return task()

    def executemany(self, operation, seq_of_parameters):
        """Prepare a database operation (query or command) and then
        execute it against all parameter sequences or mappings
        found in the sequence seq_of_parameters.

        It will return the number or rows affected
        """

        count = 0
        for parameters in seq_of_parameters:
            count += self.execute(operation, parameters)
        self.rowcount = count
        return count

    def fetchone(self):
        """Fetch the next row of a query result set, returning a
        single sequence, or None when no more data is available."""

        self.__check_executed()

        if self.__query_id == -1:
            msg = "query didn't result in a resultset"
            self.__exception_handler(ProgrammingError, msg)

        if self.rownumber >= self.rowcount:
            return None

        if self.rownumber >= (self.__offset + len(self.__rows)):
            self.nextset()

        result = self.__rows[self.rownumber - self.__offset]
        self.rownumber += 1
        return result

    def fetchmany(self, size=None):
        """Fetch the next set of rows of a query result, returning a
        sequence of sequences (e.g. a list of tuples). An empty
        sequence is returned when no more rows are available.

        The number of rows to fetch per call is specified by the
        parameter.  If it is not given, the cursor's arraysize
        determines the number of rows to be fetched. The method
        should try to fetch as many rows as indicated by the size
        parameter. If this is not possible due to the specified
        number of rows not being available, fewer rows may be
        returned.

        An Error (or subclass) exception is raised if the previous
        call to .execute*() did not produce any result set or no
        call was issued yet.

        Note there are performance considerations involved with
        the size parameter.  For optimal performance, it is
        usually best to use the arraysize attribute.  If the size
        parameter is used, then it is best for it to retain the
        same value from one .fetchmany() call to the next."""

        self.__check_executed()

        if self.rownumber >= self.rowcount:
            return []

        end = self.rownumber + (size or self.arraysize)
        end = min(end, self.rowcount)
        result = self.__rows[self.rownumber -
                             self.__offset:end - self.__offset]
        self.rownumber = min(end, len(self.__rows) + self.__offset)

        while (end > self.rownumber) and self.nextset():
                result += self.__rows[self.rownumber -
                                      self.__offset:end - self.__offset]
                self.rownumber = min(end, len(self.__rows) + self.__offset)
        return result

    def fetchall(self):
        """Fetch all (remaining) rows of a query result, returning
        them as a sequence of sequences (e.g. a list of tuples).
        Note that the cursor's arraysize attribute can affect the
        performance of this operation.

        An Error (or subclass) exception is raised if the previous
        call to .execute*() did not produce any result set or no
        call was issued yet."""

        self.__check_executed()

        if self.__query_id == -1:
            msg = "query didn't result in a resultset"
            self.__exception_handler(ProgrammingError, msg)

        result = self.__rows[self.rownumber - self.__offset:]
        self.rownumber = len(self.__rows) + self.__offset

        # slide the window over the resultset
        while self.nextset():
            result += self.__rows
            self.rownumber = len(self.__rows) + self.__offset

        return result

    def nextset(self):
        """This method will make the cursor skip to the next
        available set, discarding any remaining rows from the
        current set.

        If there are no more sets, the method returns
        None. Otherwise, it returns a true value and subsequent
        calls to the fetch methods will return rows from the next
        result set.

        An Error (or subclass) exception is raised if the previous
        call to .execute*() did not produce any result set or no
        call was issued yet."""

        self.__check_executed()

        if self.rownumber >= self.rowcount:
            return False

        self.__offset += len(self.__rows)

        end = min(self.rowcount, self.rownumber + self.arraysize)
        amount = end - self.__offset

        command = 'Xexport %s %s %s' % (self.__query_id, self.__offset, amount)
        block = self.connection.command(command)
        self.__store_result(block)
        return True

    def setinputsizes(self, sizes):
        """
        This method would be used before the .execute*() method
        is invoked to reserve memory. This implementation doesn't
        use this.
        """
        pass

    def setoutputsize(self, size, column=None):
        """
        Set a column buffer size for fetches of large columns
        This implementation doesn't use this
        """
        pass

    def __iter__(self):
        return self

    def __next__(self):
        row = self.fetchone()
        if not row:
            raise StopIteration
        return row

    def __store_result(self, block):
        """ parses the mapi result into a resultset"""

        if not block:
            block = ""

        column_name = ""
        scale = display_size = internal_size = precision = 0
        null_ok = False
        type_ = []

        for line in block.split("\n"):
            if line.startswith(mapi.MSG_INFO):
                logger.info(line[1:])
                self.messages.append((Warning, line[1:]))

            elif line.startswith(mapi.MSG_QTABLE):
                (self.__query_id, rowcount, columns, tuples) = line[2:].split()

                columns = int(columns)   # number of columns in result
                self.rowcount = int(rowcount)  # total number of rows
                #tuples = int(tuples)     # number of rows in this set
                self.__rows = []

                # set up fields for description
                #table_name = [None] * columns
                column_name = [None] * columns
                type_ = [None] * columns
                display_size = [None] * columns
                internal_size = [None] * columns
                precision = [None] * columns
                scale = [None] * columns
                null_ok = [None] * columns
                #typesizes = [(0, 0)] * columns
                self.__offset = 0
                self.lastrowid = None

            elif line.startswith(mapi.MSG_HEADER):
                (data, identity) = line[1:].split("#")
                values = [x.strip() for x in data.split(",")]
                identity = identity.strip()

                if identity == "name":
                    column_name = values
                #elif identity == "table_name":
                #    table_name = values
                elif identity == "type":
                    type_ = values
                #elif identity == "length":
                #   length = values
                elif identity == "typesizes":
                    typesizes = [[int(j) for j in i.split()] for i in values]
                    internal_size = [x[0] for x in typesizes]
                    for num, typeelem in enumerate(type_):
                        if typeelem in ['decimal']:
                            precision[num] = typesizes[num][0]
                            scale[num] = typesizes[num][1]
                #else:
                #    msg = "unknown header field"
                #    self.messages.append((InterfaceError, msg))
                #    self.__exception_handler(InterfaceError, msg)

                self.description = list(zip(column_name, type_, display_size,
                                            internal_size, precision, scale,
                                            null_ok))
                self.__offset = 0
                self.lastrowid = None

            elif line.startswith(mapi.MSG_TUPLE):
                values = self.__parse_tuple(line)
                self.__rows.append(values)

            elif line.startswith(mapi.MSG_TUPLE_NOSLICE):
                self.__rows.append((line[1:],))

            elif line.startswith(mapi.MSG_QBLOCK):
                self.__rows = []

            elif line.startswith(mapi.MSG_QSCHEMA):
                self.__offset = 0
                self.lastrowid = None
                self.__rows = []
                self.description = None
                self.rowcount = -1

            elif line.startswith(mapi.MSG_QUPDATE):
                (affected, identity) = line[2:].split()
                self.__offset = 0
                self.__rows = []
                self.description = None
                self.rowcount = int(affected)
                self.lastrowid = int(identity)
                self.__query_id = -1

            elif line.startswith(mapi.MSG_QTRANS):
                self.__offset = 0
                self.lastrowid = None
                self.__rows = []
                self.description = None
                self.rowcount = -1

            elif line == mapi.MSG_PROMPT:
                return

            elif line.startswith(mapi.MSG_ERROR):
                self.__exception_handler(ProgrammingError, line[1:])

        self.__exception_handler(InterfaceError, "Unknown state, %s" % block)

    def __parse_tuple(self, line):
        """ parses a mapi data tuple, and returns a list of python types"""
        elements = line[1:-1].split(',\t')
        if len(elements) == len(self.description):
            return tuple([pythonize.convert(element.strip(), description[1])
                          for (element, description) in zip(elements,
                                                            self.description)])
        else:
            self.__exception_handler(InterfaceError,
                                     "length of row doesn't match header")

    def scroll(self, value, mode='relative'):
        """Scroll the cursor in the result set to a new position according
        to mode.

        If mode is 'relative' (default), value is taken as offset to
        the current position in the result set, if set to 'absolute',
        value states an absolute target position.

        An IndexError is raised in case a scroll operation would
        leave the result set.
        """
        self.__check_executed()

        if mode not in ['relative', 'absolute']:
            msg = "unknown mode '%s'" % mode
            self.__exception_handler(ProgrammingError, msg)

        if mode == 'relative':
            value += self.rownumber

        if value > self.rowcount:
            self.__exception_handler(IndexError,
                                     "value beyond length of resultset")

        self.__offset = value
        end = min(self.rowcount, self.rownumber + self.arraysize)
        amount = end - self.__offset
        command = 'Xexport %s %s %s' % (self.__query_id, self.__offset, amount)
        block = self.connection.command(command)
        self.__store_result(block)

    def copy_from(self, file, table, field_separator=",", record_separator="\\n",
                  string_quote=None, null_string=None, locked=False, offset=None):
        """Copy data into table from file-like object

        The contents of `file` must end with `record_separator`.
        """
        offset = "OFFSET {}".format(offset) if offset else ""
        command = "COPY {} INTO {} FROM STDIN DELIMITERS '{}', '{}'".format(offset, table, field_separator,
                                                                         record_separator)
        if string_quote is not None:
            command += ", '{}'".format(string_quote)
        if null_string is not None:
            command += " NULL AS '{}'".format(null_string)
        if locked:
            command += " LOCKED"

        self.connection.execute(command, file)

    def copy_into(self, file, table, field_separator=",", record_separator="\\n",
                  string_quote=None, null_string=None):
        self.copy_query_into(file, "SELECT * FROM %s" % table, field_separator, record_separator,
                           string_quote, null_string)

    def copy_query_into(self, file, query, field_separator=",", record_separator="\\n",
                        string_quote=None, null_string=None):
        """Implementation of COPY ... INTO STDOUT ..., writing to a file-like object

        A rather brittle implementation due to issues with the MAPI protocol when sending raw
        resultsets (no quoting of characters that are valid MAPI commands).
        """

        if record_separator != "\\n":
            raise NotImplementedError("Record separators other than \\n are not supported yet")

        command = "COPY ({}) INTO STDOUT DELIMITERS '{}', '{}'".format(query, field_separator,
                                                                       record_separator)
        if string_quote is not None:
            command += ", '{}'".format(string_quote)
        if null_string is not None:
            command += " NULL AS '{}'".format(null_string)

        self.rowcount = 0
        self.__rows = []
        self.__offset = 0
        self.lastrowid = None

        block = self.connection.execute(command, file)

        if not block:
            block = ""

        block_iter = iter(block.split("\n"))

        line = next(block_iter)
        if line.startswith(mapi.MSG_QTABLE):
            (self.__query_id, rowcount, columns, tuples) = line[2:].split()
            rowcount = int(rowcount)
        else:
            raise InterfaceError("Expecting QTABLE, got %s" % line)

        for line in islice(block_iter, 5):
            if not line.startswith(mapi.MSG_HEADER):
                raise InterfaceError("Expecting header, got %s" % line)

        for line in islice(block_iter, rowcount):
            file.write(line)
            file.write("\n")

        line = next(block_iter)
        if not line.startswith(mapi.MSG_QUPDATE):
            raise InterfaceError("Expecting QUPDATE, got %s" % line)

    def __exception_handler(self, exception_class, message):
        """ raises the exception specified by exception, and add the error
        to the message list """
        self.messages.append((exception_class, message))
        raise exception_class(message)
